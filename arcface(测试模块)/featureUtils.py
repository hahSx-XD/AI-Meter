import os,time,csv
from posixpath import islink
import cv2
import threading
from arcface.engine30 import *

APPID = b'BVrj1mQoJbMDg7SiVkmLtDWJR11sA14MGwv7FWAXwRxW'
SDKKey = b'HvoTXU82rAAemXxj3zF6oVz6mNR3qhtMVgJF45oG9A8H'


# 激活
res = ASFOnlineActivation(APPID,SDKKey)
if res == 90114 or res == 0:
    print("Activation successful")

if not ASFGetActiveFileInfo()[0]:
    print("SDK version: " + ASFGetActiveFileInfo()[1].sdkVersion.decode())


def get_engine():
    face_engine = ArcFace()
    mask = ASF_FACE_DETECT | ASF_FACERECOGNITION | ASF_AGE | ASF_GENDER |ASF_FACE3DANGLE | ASF_LIVENESS | ASF_IR_LIVENESS
    res = face_engine.ASFInitEngine(ASF_DETECT_MODE_IMAGE,ASF_OP_0_ONLY,30,10,mask)
    if (res == MOK):
        return face_engine
    else:
        return None

def imgscale(shape):
    return (shape[0]//4*4,shape[1]//4*4)

def get_feature(filename):
    face_engine = get_engine()
    while(face_engine == None):
        time.sleep(1)
        face_engine = get_engine()

    fileread = cv2.imread(filename)
    fileread = cv2.resize(fileread,imgscale(fileread.shape))
    try:
        tres, tdetectedFace = face_engine.ASFDetectFaces(fileread)
        if tdetectedFace.faceNum != 0:
            processMask = ASF_AGE | ASF_GENDER | ASF_FACE3DANGLE | ASF_LIVENESS
            face_engine.ASFProcess(fileread,tdetectedFace,processMask)
            face = ASF_SingleFaceInfo()
            face.faceRect = tdetectedFace.faceRect[0]
            face.faceOrient = tdetectedFace.faceOrient[0]
            res, face_feature = face_engine.ASFFaceFeatureExtract(fileread,face)
            face_engine.ASFUninitEngine()
            return string_at(face_feature.feature, face_feature.featureSize)
    except:
        face_engine.ASFUninitEngine()

def save_scene_feature(scenename):
    # print(scenename+"/"+scenename+".csv")
    with open(scenename+"/"+scenename+".csv",'w') as f:
        csvfile = csv.writer(f)
        for root,dirs,files in os.walk(scenename+"/des"):
            for file in files:
                filename = os.path.join(root,file)
                """print feature hex directly"""
                # print(filename.split('/')[-1],test(filename).hex())
                """save feature hex as csv"""
                csvfile.writerow([filename.split('/')[-1],get_feature(filename).hex()])

def get_store_feature(scenename):
    with open(scenename+"/"+scenename+".csv",'r') as f:
        lines = csv.reader(f)
        for line in lines:
            print(line)


if __name__ == "__main__":
    save_scene_feature("genscene")
    # get_store_feature("scene1")

# 033_1_0_1_-1_0_0_0_0_0_0_1.bmp
# feature = ASF_FaceFeature()
# feature.set_feature(b'\x00\x80\xfaD\x00\x00\xa0A\xa1\xa2\x87;F\xf2\n=w\xe7{<h\xe2\x11\xbd\x15\xfa\x08<b|\x96<\xf0@\xa8<!B\x1f=\xb7\xd6\x9e\xbc\x00\x9f\\\xbd\x93\xb7\xf9\xbc\xe0<\x0c=p\xc5x<R\xd1\x0e\xbd\xfatn\xbc\xb8\x08\xd9\xbc\xdb\xe0\xee<\x15\x07;\xbc6\'\x13\xbd\x03\r\xc1\xbd\x1c\xde\x8c=,\\f=E\xce\xae<\xc0\x15\xec\xbb\x9d_\xdd<\xb6\xaa\xd2<~\'\xe3<\x13\xadf\xbd\xfe\xaf\xa5=R\r\xda\xbd\xab4\xaf<\x13K\xd3\xbch\x0f\xda<f\x0b\xbe\xbc\x9f1A\xbd\xc7\xba\xb4\xbd\x8b\xb5\x11=\x04\x14\x88=Z\x10\xb8\xbc:\xb5s\xbd\x1dL\xa3\xbc^\xc7\x95\xbc\x0f3B\xbeU\x92Q=\xf5\xd6m=\xef\xc1\x07\xbd|\xb0\xa5\xbdm\x02\xf4<\xa4\xe8\x9b\xbc\x91h\xeb\xbd\x19\x9d&=P\xdd\xc18\xc6.\xc7<ypL\xbb\x90\x98\x95\xbdb\x9b\x9c<#\xd8\x1a=l\xad\x18=)\xdf\xc7<\xc5\xab$\xbe\x00;$;\xfa\x826=\x8d\x8d\x0f>qP#\xbd\xfb?\xec<O\x9d\xb3=%\xad\x91\xbd%\xde/=\xc0\xfdg\xbd|\xc2\x1e\xbd\xa8\x88B=\x88k\x87=-\xcd\xfb\xbatR\x06;R\xaa6=\xb4\x1c\xea\xbd\xd1\xfb\xfc\xbd\xd3\x9c\x9e=\xdcMv\xbc\xf8\xfd\x80\xbd]\x99\xde\xbc\xcb,e=v\xef-\xbd\x8a\xc5\xfb=\xa3_"\xbd\x94\xb6\x9a<\x82\xe4\x9f\xbd\xc4\xc5\x7f=\xbc\xf65\xbd\x01\xa0~=\xc8\x13\x97<\x1e\x7f\x89\xbd1\xb9U\xbdf\xd7\x17\xbc\x8e\x83/=\xcc\xc6\xda<\x80m\n\xbe\x93\x03\xbe=Q\xcd\xa3=6\x95\x8d\xbd\x8c8\x89\xbdo+\xf7\xbd-\xda\x01\xbd\x98\xc2C=o\xd8\xca=\xfc\xda"\xbd\xa0W\xba\xbd\x85\x96s\xbd\x10\xc3Y=\x83}\xbe\xbd\x7f\x14C;\x92\x16\x03\xbc\xc4\x1e\x14=\xd20_<\xfd$\xe3\xbdF\x94\x9a\xbb\\\x9e(\xbcR5\xbe\xbd\xa8w?\xbd\x06\xab\xa8=\xc3\xb5\xe7\xbd8\xb5v<h\xc3\x98\xbd\xd4U\xfe=\xaa\xad\xcb\xbc\x02\xaa]<8\xc6\xce\xbcH7\xa1\xbc&(\x85\xbd\xc0\xe8\xfd<&\xdc\x0e\xbd\x1ev\xe4\xbc\xeb\xc8\x96\xbd\x95\x8dE=N\xcd1=\xf2\x7f\x8b=R5\x15\xbeXJ\xa9<U\xb9\xd6\xbc1:\xaf\xbb7\x17\xb9\xbcK\x12\xce=\xc2X\x12\xbd\xea\xfc\xcf;(\xe5I\xbc\x06%\xad\xbd"\xe6\xf8<\x8c\x93\x0f\xbd\xa9\xad\xe2<J~\xdd<\x03\xa8\xd5\xbd8\x07\xa6\xbds\x8d|<\x19^\xf3<\t\xd6\x85;j\x19\x89\xbdF\xa0 \xbd\'\xa0\xcb\xbc\xa8\xb2\x8d\xbc%\x916\xbaT\x90%\xbd\xe7\xae\xba<?\xcf:\xbd"s=\xbd\xe2\xfc\xde<\x1cs\xc3:\xceY\x92\xbd\x87\x97C=\xaf\xf9\xbb=\'E\xa1<\xa35\x00\xbeB\xcd\xdd=9\x07\x0e\xbe\xa5\xf8\x80\xbcP{\x02\xbe\xc5y\xff<}\xbb\x91<\\\x92I\xbd\x9a\xf5\xd2=\x0c\x90\x8e=#\x1b]<s!\xb5\xbd\x01\xc3\xf7<\x19\xf8K\xbd\xef4H=\xd5\xc6K=\x1a\x0b\xa3\xbdA\xd3\xf6\xbc\x80<\xeb:pC\xba\xbd\x19\xf5\x1d=\xeaw\x15<\xd2j\x05\xbe\x15\xcd\xe8=\x7fV\xc4<\xd6\x82\xd2\xbdfk\xe7\xbd\x9ag\x1c\xbdg\xb5_<\xcb\x0e\x14=3\xdd\xf2<\x90z\xf1\xbc\xd9\x8a\x01\xbd\xfe\xda\xe1:/\x16\xf1=\xdc\xef\xc4=\xb9\xb1\xbb=-\x01\x96\xbdQ]\x1e=JO\x87=~\x93?={\x0c<\xbd\xa1\x12\x97\xbd\xadw\x8e<e\x93 \xbd\x8dG\x97<q\x08G;\r@\xa3=\xa4\xccT\xbd\xcf\xeds\xbd@\xecg\xbc5\xa5\xa3<B\x03\xd2=H\xc1y=G\xf4|>\xb6\xd8f=\x93\xa3\x82\xbd\xc2k\xaf;\x80t >\xecdF\xbby!\xff\xbd\xde\xd2\xeb\xbc.}\x8c\xbc3\xf1G\xbd\xc0I\x91\xbc\x0e\x9d3=NY\x98\xbd)P\xc5\xbc\x8cJ\xd6=\x8c@Q;+\xdec=\xab\xa6\x89=n\xfd7\xbd\x8a\x8d\xfe\xbd\xb77)=\xd96\x13>\xc4\xc4A\xbdr\x14\x1d=\x8dTs<\xb4Ve\xbd\x13\xaai:wU\xb8=X8\xea=\x93k\xc1<\xab\xb3d\xbc~,\x9a<')
# print(feature)
